<!-- Scroll to Top Button-->
<a class="scroll-to-top rounded" href="#page-top">
  <i class="fas fa-angle-up"></i>
</a>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel"
  aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button id="confirmDelete" type="button" class="btn btn-primary">Delete</button>
      </div>
    </div>
  </div>
</div>

<!-- Logout Modal-->
<div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
  aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Ready to Leave?</h5>
        <button class="close" type="button" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">×</span>
        </button>
      </div>
      <div class="modal-body">Select Logout to end your current session.</div>
      <div class="modal-footer">
        <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
        <a class="btn btn-primary" href="/logout">Logout</a>
      </div>
    </div>
  </div>
</div>

<!-- JS Scripts -->

<script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="/vendor/jquery-easing/jquery.easing.min.js"></script>
<script src="/js/sb-admin-2.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="/vendor/chart.js/Chart.min.js"></script>
<script src="/js/demo/chart-area-demo.js"></script>
<script src="/js/demo/chart-pie-demo.js"></script>


<!-- data tables -->
<script src="/js/crud.js"></script>
<script src="/js/dashboard-charts.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const pictureInput = document.getElementById('picture');
    const previewContainer = document.getElementById('newPicturePreview');
    const previewImage = document.getElementById('previewImage');

    if (!pictureInput) {
      console.error('Picture input element not found!');
      return;
    }

    pictureInput.addEventListener('change', function (event) {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();

        reader.onload = function (e) {
          previewImage.src = e.target.result;
          previewContainer.style.display = 'block';
        };

        reader.readAsDataURL(file);
      } else {
        // Reset jika user batal pilih file
        previewImage.src = '';
        previewContainer.style.display = 'none';
      }
    });
  });
</script>


<!-- script generate invoice -->
<script>
  let items = <%- JSON.stringify(typeof items !== 'undefined' ? items : []) %>;

  const isEdit = <%= JSON.stringify(typeof isEdit !== 'undefined' ? isEdit : false) %>;

  let deleteId = null; // simpan id sementara

  $(document).ready(function () {

    const entity = <%- JSON.stringify(typeof entity !== 'undefined' ? entity : '') %>;
    if (!entity) {
    console.log('No entity provided — goods fetch disabled.');
      return;
    }

    const pricekey = entity === "purchases" ? "purchaseprice" : "sellingprice";
    // ==== 1. Generate invoice sekali saja ====
    if (!isEdit) {

      const storedInvoice = sessionStorage.getItem('currentInvoice');
      const today = new Date().toISOString().slice(0, 10).replace(/-/g, ''); // YYYYMMDD

    }

    // ==== 2. Ketika barcode diisi ====
    $('#barcode').change(function () {
      console.log('barcode changed', $(this).val())
      const barcode = $(this).val();
      if (!barcode) return resetFields();

      $.get(`/${entity}/goods/${barcode}`)
        .done(function (data) {
          console.log('Goods data:', data);
          $('#goodsName').val(data.name || '');
          $('#stock').val(data.stock || '');

          const price = data[pricekey]
          $('#price').val(price);
          $('#qty').val(1);
          $('#totalPrice').val(price);
        })
        .fail(function () {
          alert('Error fetching goods data!');
        });
    });

    // ==== 3. Kalkulasi total otomatis ====
    $('#qty').on('input', function () {
      const qty = Number($(this).val());
      const price = Number($('#price').val());
      $('#totalPrice').val(qty * price);
    });

    // ==== 4. Tambah item ke table ====
    $('#addItem').click(function () {
      const invoice = $('#invoice').val();
      const barcode = $('#barcode').val();
      const name = $('#goodsName').val();
      const qty = Number($('#qty').val());
      const price = Number($('#price').val());
      const total = Number($('#totalPrice').val());
        const payload = {
        invoice, barcode, qty,totalprice: total
      };
      const operator = $('input[name="operator"]').val();

      if (!barcode || qty <= 0) return alert('Select goods and enter qty');
      if (entity === 'purchases') payload.purchaseprice = price;
      else payload.sellingprice = price;

      $.ajax({
        url: `/${entity}/add-item`,
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
          invoice,
          barcode,
          qty,
          [pricekey]: price,
          totalprice: total,
          operator

        })
      })
        .done(function (response) {
          console.log('Add Item Response:', response); // Debug
          if (response.success) {
            items.push({
              id: response.id,
              itemcode: barcode,
              name: name, quantity: qty,
              [pricekey]: price,
              totalprice: total
            });
            renderTable();
            resetFields();
            $.get(`/${entity}/totalsum/${invoice}`)
              .done(function (data) {
                $('#totalsum').val(data.totalsum);
              })
          } else {
            alert('Failed to add item!');
          }
        })
        .fail(function () {
          alert('Server error while adding item!');
        });
    });

    // ==== 5. Finish & clear sessionStorage ====
    $('#btnFinish').click(function (e) {
      e.preventDefault()

      if (items.length === 0) {
        alert('Add at least one item!');
        return;
      }

      const partner = entity === "purchases" ? $('#supplier').val() : $('#customer').val();
      const invoice = $('#invoice').val();


      if (!partner) {
        alert('Please select a supplier before finishing!');
        return;
      }
      $('<input>').attr({
        type: 'hidden',
        name: 'items',
        value: JSON.stringify(items)
      }).appendTo('#finalizeForm');



      // setelah submit, invoice dihapus supaya bisa generate baru lagi
      $('#finalizeForm').submit(function (e) {

        console.log('Form data serialized:', $(this).serialize()); // cek data
      });

      $('#finalizeForm').off('submit').submit();

    });

    // delete itemTable

    $(document).on('click', '.btn-deleteItem', function (e) {
      e.preventDefault();

      deleteId = $(this).data('id');
      $('#deleteModal').modal('show');

      $('#confirmDelete').off('click').on('click', function (e) {
        e.preventDefault();

        if (!deleteId) return;

        $.ajax({
          url: `/${entity}/delete-item/${deleteId}`,
          method: 'GET',
          success: function (response) {
            if (response.success) {
              $('#deleteModal').modal('hide');

              $(`a.btn-deleteItem[data-id="${deleteId}"]`).closest('tr').remove();
            } else {
              showError('failed to delete item!')
            }
          },
          error: function () {
            showError('server error while deleting item!');
          }
        })
      })
      $('#deleteModal').modal('hide');
    });

    // ==== Helper Functions ====
    function renderTable() {
      const tbody = $('#itemsTable');
      tbody.html('');
      if (items.length === 0) {
        tbody.append('<tr><td colspan="6" class="text-center">No items</td></tr>');
        return;
      }
      items.forEach((item, i) => {
        tbody.append(`
          <tr>
            <td>${i + 1}</td>
            <td>${item.itemcode}</td>
            <td>${item.name}</td>
            <td>${item.quantity}</td>
            <td>${item[pricekey]}</td>
            <td>${item.totalprice}</td>
            <td>
          <a href="#" 
             class="btn btn-sm btn-danger btn-deleteItem rounded-circle" 
             data-id="${item.id}">
             <i class="fas fa-trash"></i>
          </a>
        </td>
          </tr>
        `);
      });
    }

    function showError(msg) {
      $('.container-fluid').prepend(`
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
      ${msg}
      <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
  `);
    }



    function resetFields() {
      $('#barcode').val('');
      $('#goodsName, #stock, #price, #qty, #totalPrice').val('');
    }

    function formatTime(dateString) {
      const date = new Date(dateString);
      const y = date.getFullYear();
      const m = String(date.getMonth() + 1).padStart(2, '0');
      const d = String(date.getDate()).padStart(2, '0');
      const h = String(date.getHours()).padStart(2, '0');
      const min = String(date.getMinutes()).padStart(2, '0');
      const s = String(date.getSeconds()).padStart(2, '0');
      return `${y}-${m}-${d} ${h}:${min}:${s}`;
    }
  });

  // change event listener
  document.getElementById('pay').addEventListener('input', function() {
    const total = parseFloat(document.getElementById('totalsum').value) || 0;
    const pay = parseFloat(this.value) || 0;
    const change = pay - total;
    document.getElementById('change').value = change >= 0 ? change : 0;
  });

</script>

<script>
  // Prevent ReferenceError if dashboard variables aren't defined
  var monthlyData = <%- typeof monthly !== 'undefined' ? JSON.stringify(monthly) : '[]' %>;
  var directRevenue = <%= typeof directRevenue !== 'undefined' ? directRevenue : 0 %>;
  var customerRevenue = <%= typeof customerRevenue !== 'undefined' ? customerRevenue : 0 %>;
</script>
